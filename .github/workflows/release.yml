name: Release Branch CI/CD to UAT and PROD

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests
        run: ./gradlew test

      - name: List test results directory
        if: always()
        run: |
          echo "Checking test results directory..."
          ls -la build/ || echo "build directory not found"
          ls -la build/test-results/ || echo "test-results directory not found"
          ls -la build/test-results/test/ || echo "test directory not found"
          find . -name "*.xml" -path "*/test-results/*" || echo "No XML files found"

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: always() && hashFiles('build/test-results/test/*.xml') != ''
        with:
          name: "[Release Report] JUnit Tests Report"
          path: build/test-results/test/*.xml
          reporter: java-junit

#  deploy-uat:
#    needs: [ test ]
#    runs-on: ubuntu-latest
#    environment: uat  # ‰ΩøÁî®GitHub Environment‰øùÊä§ÔºåÈúÄË¶ÅÊâãÂä®approval
#    if: github.ref == 'refs/heads/release'
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Make gradlew executable
#        run: chmod +x ./gradlew
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Build application
#        run: ./gradlew assemble
#
#      - name: Install Railway CLI
#        if: github.event_name != 'pull_request'
#        run: npm install -g @railway/cli
#
#      - name: Deploy to Railway UAT Service
#        run: |
#          echo "Starting deployment to Railway UAT..."
#          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
#        env:
#          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
#          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
#
#      - name: UAT Health Check
#        run: |
#          echo "Starting UAT health check (5 minutes max)..."
#
#          SERVICE_URL="${{ secrets.SERVICE_BASE_URL }}"
#
#          # Wait 60 seconds for service startup
#          echo "Waiting 60 seconds for UAT service to start..."
#          sleep 60
#
#          # 5-minute health check with 30-second intervals
#          for i in {1..10}; do
#            echo "UAT health check attempt $i/10..."
#            if curl -s -f --max-time 30 "${SERVICE_URL}/health" > /dev/null 2>&1; then
#              echo "‚úÖ UAT Service is healthy!"
#              exit 0
#            fi
#            if [ $i -lt 10 ]; then
#              echo "‚è≥ UAT Service not ready, waiting 30s..."
#              sleep 30
#            fi
#          done
#          echo "‚ùå UAT Health check failed after 5 minutes"
#          exit 1

  deploy-prod:
    needs: [ test]
    runs-on: ubuntu-latest
    environment: prod  # ‰ΩøÁî®GitHub Environment‰øùÊä§ÔºåÈúÄË¶ÅÊâãÂä®approval
    if: github.ref == 'refs/heads/release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build application
        run: ./gradlew assemble

      - name: Install Railway CLI
        if: github.event_name != 'pull_request'
        run: npm install -g @railway/cli

      - name: Deploy to Railway PROD Service
        run: |
          set -Eeuo pipefail
          echo "Starting deployment to Railway PROD..."

          # ÊçïËé∑ÈîôËØØÊó∂ËæìÂá∫Ë∞ÉËØï‰ø°ÊÅØ
          trap 'echo "::group::Railway Debug Dump"; echo "~/.railway structure:"; ls -R ~/.railway 2>/dev/null || echo "(no ~/.railway)"; echo "Active processes (railway):"; ps -ef | grep -i railway || true; echo "Disk usage:"; df -h; echo "::endgroup::"' ERR

          echo "::group::Environment Summary"
          echo "Runner: $(uname -a)"
          echo "Commit: ${GITHUB_SHA}"
          echo "Java:"; java -version 2>&1 | head -n1 || true
          echo "Gradle artifacts (build/libs):"; ls -lh build/libs || echo "(no build/libs)"
          echo "Token length: ${#RAILWAY_TOKEN} (content hidden)"
          echo "Project ID (first 8): ${RAILWAY_PROJECT_ID:0:8}..."
          echo "Service ID (first 8): ${RAILWAY_SERVICE_ID:0:8}..."
          echo "Free memory:"; free -m || true
          echo "::endgroup::"

          echo "Cleaning previous Railway state..."
          rm -rf ~/.railway || true

          echo "Railway CLI version:"
          railway --version || true

          echo "Logging in (non-interactive)..."
          railway login --token "$RAILWAY_TOKEN"

          echo "Verifying login by listing services (masked failures allowed)..."
          (railway services --project "$RAILWAY_PROJECT_ID" || true)

          echo "Starting primary deploy (time measured)..."
          start_ts=$(date +%s)
          if ! railway up --project "$RAILWAY_PROJECT_ID" --service "$RAILWAY_SERVICE_ID"; then
            echo "Primary deploy failed, retrying with fresh state..."
            echo "::group::First Failure Context"; ls -la ~/.railway 2>/dev/null || true; echo "::endgroup::"
            rm -rf ~/.railway || true
            railway login --token "$RAILWAY_TOKEN"
            echo "Retrying deploy..."
            railway up --project "$RAILWAY_PROJECT_ID" --service "$RAILWAY_SERVICE_ID"
          fi
          end_ts=$(date +%s)
          echo "Deploy duration: $((end_ts-start_ts))s"

          echo "::group::Post-Deploy Status"
          railway status --project "$RAILWAY_PROJECT_ID" || true
          echo "Listing latest deployments (if supported)..."
          railway deployments --project "$RAILWAY_PROJECT_ID" --service "$RAILWAY_SERVICE_ID" 2>/dev/null || true
          echo "::endgroup::"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_LOG_LEVEL: debug

      - name: PROD Health Check
        run: |
          echo "Starting PROD health check (5 minutes max)..."
          
          SERVICE_URL="${{ secrets.SERVICE_BASE_URL }}"
          
          # Wait 60 seconds for service startup
          echo "Waiting 60 seconds for PROD service to start..."
          sleep 60
          
          # 5-minute health check with 30-second intervals
          for i in {1..10}; do
            echo "PROD health check attempt $i/10..."
            if curl -s -f --max-time 30 "${SERVICE_URL}/health" > /dev/null 2>&1; then
              echo "‚úÖ PROD Service is healthy!"
              exit 0
            fi
            if [ $i -lt 10 ]; then
              echo "‚è≥ PROD Service not ready, waiting 30s..."
              sleep 30
            fi
          done
          echo "‚ùå PROD Health check failed after 5 minutes"
          exit 1

      - name: Deployment Success Notification
        run: |
          echo "üéâ Release deployment completed successfully!"
          echo "All environments deployed and healthy!"